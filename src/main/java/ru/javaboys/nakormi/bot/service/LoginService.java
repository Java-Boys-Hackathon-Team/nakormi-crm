package ru.javaboys.nakormi.bot.service;

import io.jmix.core.DataManager;
import io.jmix.core.security.SystemAuthenticator;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Document;
import org.telegram.telegrambots.meta.api.objects.PhotoSize;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.javaboys.nakormi.bot.routing.Callbacks;
import ru.javaboys.nakormi.bot.utils.BotFeaturesUtils;
import ru.javaboys.nakormi.bot.utils.BotUtils;
import ru.javaboys.nakormi.bot.utils.CommandArgs;
import ru.javaboys.nakormi.bot.utils.CommonKeyboards;
import ru.javaboys.nakormi.bot.utils.TelegramContext;
import ru.javaboys.nakormi.entity.Address;
import ru.javaboys.nakormi.entity.District;
import ru.javaboys.nakormi.entity.InvitationCode;
import ru.javaboys.nakormi.entity.Person;
import ru.javaboys.nakormi.entity.PersonGenderType;
import ru.javaboys.nakormi.entity.PersonTypes;
import ru.javaboys.nakormi.entity.TelegamUser;
import ru.javaboys.nakormi.entity.Volunteer;
import ru.javaboys.nakormi.entity.Warehouse;
import ru.javaboys.nakormi.entity.WarehouseTypes;
import ru.javaboys.nakormi.service.AttachmentService;
import ru.javaboys.nakormi.service.TelegramService;

import java.io.FileNotFoundException;
import java.time.LocalDate;
import java.util.Comparator;
import java.util.List;
import java.util.Map;

@Component
@RequiredArgsConstructor
public class LoginService {

    private final BotFeaturesUtils botFeaturesUtils;

    private final SystemAuthenticator systemAuthenticator;

    private final DataManager dataManager;

    private final TelegramService telegramService;

    private final TelegramContext telegramContext;

    private final AttachmentService attachmentService;

    private final CommonKeyboards commonKeyboards;

    public void processCommandStart(Update update) throws TelegramApiException {
        Map<String, String> buttons = Map.of(
                Callbacks.LOGIN_HAVE_CODE,"üî¢ –£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–¥!",
                Callbacks.LOGIN_ENTER, "üîë –í–æ–π—Ç–∏"
        );

        botFeaturesUtils.sendInlineKeyboard(
                update,
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.",
                buttons
        );
    }

    public void processCommandCode(Update update) throws TelegramApiException {
        CommandArgs commandArgs = BotUtils.parseCommand(update.getMessage().getText());

        var userCode = commandArgs.getArguments();
        if (!BotUtils.validateArgsCount(userCode, 1)) {
            botFeaturesUtils.sendMessage(update, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã /code");
            return;
        }

        var optionalCode = systemAuthenticator.withSystem(() -> dataManager.load(InvitationCode.class)
                .query("e.code = ?1", userCode)
                .optional());

        if (optionalCode.isPresent()) {
            var code = optionalCode.get();

            if (code.getUsed()) {
                botFeaturesUtils.sendMessage(update, String.format("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ %s –±—ã–ª —Ä–∞–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω", code.getCode()));
                return;
            }

            if (code.getExpirationDate().isBefore(LocalDate.now())) {
                botFeaturesUtils.sendMessage(update, String.format("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ %s –±—ã–ª –ø—Ä–æ—Å—Ä–æ—á–µ–Ω", code.getCode()));
                return;
            }

            systemAuthenticator.begin();

            TelegamUser telegamUser = telegramContext.getTelegamUser();
            telegamUser.setInvitationCode(code);
            telegamUser.setInvitationCodeOk(true);

            telegramContext.setTelegamUser(dataManager.save(telegamUser));

            systemAuthenticator.end();

            botFeaturesUtils.sendMessage(update, """
                            –í–∞—à –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ú—ã —Å–æ–∑–¥–∞–¥–∏–º –í–∞–º —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞!
                            
                            –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–≤–æ–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.
                            
                            –ü—Ä–∏–º–µ—Ä: /reg ivan qwerty
                            """);
        } else {
            botFeaturesUtils.sendMessage(update, String.format("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ %s –Ω–µ –Ω–∞–π–¥–µ–Ω", commandArgs.getArguments()));
        }
    }

    public void processCommandReg(Update update) throws TelegramApiException {
        CommandArgs commandArgs = BotUtils.parseCommand(update.getMessage().getText());

        var auth = commandArgs.getArguments().split(" ");
        if (!BotUtils.validateArgsCount(auth, 2)) {
            botFeaturesUtils.sendMessage(update, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã /reg");
            return;
        }

        systemAuthenticator.withSystem(() -> {
            telegramService.registerUser(auth[0], auth[1]);

            TelegamUser telegamUser = telegramContext.getTelegamUser();
            InvitationCode invitationCode = telegamUser.getInvitationCode();
            invitationCode.setUsed(true);

            telegamUser.setInvitationCode(dataManager.save(invitationCode));
            telegamUser.setNakormiCrmRegistrationOk(true);
            telegramContext.setTelegamUser(dataManager.save(telegamUser));

            return null;
        });

        botFeaturesUtils.sendMessage(update, """
                        –û—Ç–ª–∏—á–Ω–æ! –í–∞–º –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—á–µ—Ç–Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ "–ù–∞–∫–æ—Ä–º–∏ CRM".
                        –î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
                        
                        https://nakormi-crm.ru/
                        """);

        botFeaturesUtils.sendMessage(update, """
                        –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ –ò–º—è, –§–∞–º–∏–ª–∏—é, –†–∞–π–æ–Ω –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, –£–ª–∏—Ü—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, email, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–º–µ–Ω–Ω–æ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
                        
                        –ü—Ä–∏–º–µ—Ä: /person –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤—Å–∫–∏–π –°–µ–≤–µ—Ä–Ω—ã–π –í—è—Ç—Å–∫–∞—è ivan@mail.ru +79001234567
                        """);

    }

    public void processCommandPerson(Update update) throws TelegramApiException {
        CommandArgs commandArgs = BotUtils.parseCommand(update.getMessage().getText());

        var personData = commandArgs.getArguments().split(" ");
        if (!BotUtils.validateArgsCount(personData, 6)) {
            botFeaturesUtils.sendMessage(update, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã /person");
            return;
        }

        systemAuthenticator.begin();

        var district = dataManager.create(District.class);
        district.setName(personData[2]);
        district = dataManager.save(district);

        var address = dataManager.create(Address.class);
        address.setDistrict(district);
        address.setAddressText(personData[3]);
        address.setCoordinate(BotUtils.getDefaultGeoPoint());
        address = dataManager.save(address);

        var person = dataManager.create(Person.class);
        person.setName(personData[0]);
        person.setSurname(personData[1]);
        person.setPhone(personData[5]);
        person.setAddress(address);
        person.setType(PersonTypes.VOLUNTEER);
        person.setGender(PersonGenderType.MALE);
        person = dataManager.save(person);

        var warehouse = dataManager.create(Warehouse.class);
        warehouse.setDescription(String.format("–°–∫–ª–∞–¥ %s %s", person.getName(), person.getSurname()));
        warehouse.setAddress(address);
        warehouse.setStorageType(WarehouseTypes.PERSONAL);
        warehouse.setContacts(person.getPhone());
        warehouse.setSupervisor(person);
        warehouse = dataManager.save(warehouse);

        var volunteer = dataManager.create(Volunteer.class);
        volunteer.setPerson(person);
        TelegamUser tgUser = telegramContext.getTelegamUser();
        volunteer.setWarehouse(warehouse);
        volunteer = dataManager.save(volunteer);
        tgUser.setVolunteer(volunteer);
        dataManager.save(tgUser);

        var user = telegramContext.getTelegamUser().getUser();
        user.setPerson(person);
        user.setFirstName(person.getName());
        user.setLastName(person.getSurname());
        user.setEmail(personData[4]);
        dataManager.save(user);

        systemAuthenticator.end();

        botFeaturesUtils.sendMessage(update, """
                        –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è —Å–∫–∞–Ω-–∫–æ–ø–∏—è –≤–∞—à–µ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.
                        –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –∫–∞–∫ —Ñ–∞–π–ª.
                        
                        –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—É –ø–æ–¥–ø–∏—Å—å "–ø–∞—Å–ø–æ—Ä—Ç".
                        """);

    }

    public void processCommandLogin(Update update) throws TelegramApiException {
        CommandArgs commandArgs = BotUtils.parseCommand(update.getMessage().getText());

        var auth = commandArgs.getArguments().split(" ");
        if (!BotUtils.validateArgsCount(auth, 2)) {
            botFeaturesUtils.sendMessage(update, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã /login");
            return;
        }

        var result = telegramService.authenticate(auth[0], auth[1]);

        if (result) {
            commonKeyboards.sendHelloAndAccountKeyboard(update);
        } else {
            botFeaturesUtils.sendMessage(update, "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
        }
    }

    public void processDocument(Update update) throws TelegramApiException, FileNotFoundException {
        String caption = update.getMessage().getCaption();

        switch (caption) {

            case "–ø–∞—Å–ø–æ—Ä—Ç" -> {

                Document document = update.getMessage().getDocument();
                var file = botFeaturesUtils.downloadFile(document.getFileId());
                var attachment = attachmentService.save(file, document.getFileId(), document.getFileName());

                systemAuthenticator.begin();

                var volunteerId = telegramContext.getTelegamUser().getVolunteer().getId();

                dataManager.load(Volunteer.class)
                        .id(volunteerId)
                        .optional()
                        .ifPresent(v -> {
                            v.setAttachments(List.of(attachment));
                            dataManager.save(v);
                        });

                var tgUser = telegramContext.getTelegamUser();
                tgUser.setNakormiCrmAccountOk(true);
                dataManager.save(tgUser);

                systemAuthenticator.end();

                botFeaturesUtils.sendMessage(update, """
                        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
                        
                        –í—ã —Å—Ç–∞–ª–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞ "–ù–∞–∫–æ—Ä–º–∏".
                        """);

                commonKeyboards.sendHelloAndAccountKeyboard(update);
            }

            default -> {
                botFeaturesUtils.sendMessage(update, "–§–∞–π–ª –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É");
            }
        }
    }

    public void processPhoto(Update update) throws TelegramApiException, FileNotFoundException {
        List<PhotoSize> photos = update.getMessage().getPhoto();

        String fileId = photos.stream().max(Comparator.comparing(PhotoSize::getFileSize))
                .map(PhotoSize::getFileId)
                .orElse("");

        var file = botFeaturesUtils.downloadFile(fileId);

        var attachment = attachmentService.save(file, fileId, BotUtils.generatePhotoName());
    }

}
